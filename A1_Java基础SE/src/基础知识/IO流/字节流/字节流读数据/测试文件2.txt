I just wish someday and somehow,
We can be back together,
Together we'll stay,
Always and forever.

======================================

      《早发白帝城》――李白
朝辞白帝彩云间，千里江陵一日还。
两岸猿声啼不住，轻舟已过万重山。

======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
======================================
字段详细信息


CASE_INSENSITIVE_ORDER
public static final Comparator<String> CASE_INSENSITIVE_ORDER一个对 String 对象进行排序的 Comparator，作用与 compareToIgnoreCase 相同。此比较器是可序列化的。
注意，Comparator 不 考虑语言环境，因此可能导致在某些语言环境中的排序效果不理想。java.text 包提供 Collator 完成与语言环境有关的排序。


从以下版本开始：
1.2
另请参见：
Collator.compare(String, String)
构造方法详细信息

String
public String()初始化一个新创建的 String 对象，使其表示一个空字符序列。注意，由于 String 是不可变的，所以无需使用此构造方法。


--------------------------------------------------------------------------------

String
public String(String original)初始化一个新创建的 String 对象，使其表示一个与参数相同的字符序列；换句话说，新创建的字符串是该参数字符串的副本。由于 String 是不可变的，所以无需使用此构造方法，除非需要 original 的显式副本。

参数：
original - 一个 String。

--------------------------------------------------------------------------------

String
public String(char[] value)分配一个新的 String，使其表示字符数组参数中当前包含的字符序列。该字符数组的内容已被复制；后续对字符数组的修改不会影响新创建的字符串。

参数：
value - 字符串的初始值

--------------------------------------------------------------------------------

String
public String(char[] value,
              int offset,
              int count)分配一个新的 String，它包含取自字符数组参数一个子数组的字符。offset 参数是子数组第一个字符的索引，count 参数指定子数组的长度。该子数组的内容已被复制；后续对字符数组的修改不会影响新创建的字符串。

参数：
value - 作为字符源的数组。
offset - 初始偏移量。
count - 长度。
抛出：
IndexOutOfBoundsException - 如果 offset 和 count 参数索引字符超出 value 数组的范围。

--------------------------------------------------------------------------------

String
public String(int[] codePoints,
              int offset,
              int count)分配一个新的 String，它包含 Unicode 代码点数组参数一个子数组的字符。offset 参数是该子数组第一个代码点的索引，count 参数指定子数组的长度。将该子数组的内容转换为 char；后续对 int 数组的修改不会影响新创建的字符串。

参数：
codePoints - 作为 Unicode 代码点的源的数组。
offset - 初始偏移量。
count - 长度。
抛出：
IllegalArgumentException - 如果在 codePoints 中发现任何无效的 Unicode 代码点
IndexOutOfBoundsException - 如果 offset 和 count 参数索引字符超出 codePoints 数组的范围。
从以下版本开始：
1.5

--------------------------------------------------------------------------------

String
@Deprecated
public String(byte[] ascii,
                         int hibyte,
                         int offset,
                         int count)已过时。 该方法无法将字节正确地转换为字符。从 JDK 1.1 开始，完成该转换的首选方法是使用带有 Charset、字符集名称，或使用平台默认字符集的 String 构造方法。

分配一个新的 String，它是根据一个 8 位整数值数组的子数组构造的。
offset 参数是该子数组的第一个 byte 的索引，count 参数指定子数组的长度。

子数组中的每个 byte 都按照上述方法转换为 char。


参数：
ascii - 要转换为字符的 byte。
hibyte - 每个 16 位 Unicode 代码单元的前 8 位。
offset - 初始偏移量。
count - 长度。
抛出：
IndexOutOfBoundsException - 如果 offset 或 count 参数无效。
另请参见：
String(byte[], int), String(byte[], int, int, java.lang.String), String(byte[], int, int, java.nio.charset.Charset), String(byte[], int, int), String(byte[], java.lang.String), String(byte[], java.nio.charset.Charset), String(byte[])

--------------------------------------------------------------------------------

String
@Deprecated
public String(byte[] ascii,
                         int hibyte)已过时。 该方法无法将字节正确地转换为字符。从 JDK 1.1 开始，完成该转换的首选方法是使用带有 Charset、字符集名称，或使用平台默认字符集的 String 构造方法。

分配一个新的 String，它包含根据一个 8 位整数值数组构造的字符。所得字符串中的每个字符 c 都是根据 byte 数组中的相应组件 b 构造的，如下所示：
     c == (char)(((hibyte & 0xff) << 8)
                         | (b & 0xff))

参数：
ascii - 要转换为字符的 byte。
hibyte - 每个 16 位 Unicode 代码单元的前 8 位。
另请参见：
String(byte[], int, int, java.lang.String), String(byte[], int, int, java.nio.charset.Charset), String(byte[], int, int), String(byte[], java.lang.String), String(byte[], java.nio.charset.Charset), String(byte[])

--------------------------------------------------------------------------------

String
public String(byte[] bytes,
              int offset,
              int length,
              String charsetName)
       throws UnsupportedEncodingException通过使用指定的字符集解码指定的 byte 子数组，构造一个新的 String。新 String 的长度是一个字符集函数，因此可能不等于子数组的长度。
当给定 byte 在给定字符集中无效的情况下，此构造方法的行为没有指定。如果需要对解码过程进行更多控制，则应该使用 CharsetDecoder 类。


参数：
bytes - 要解码为字符的 byte
offset - 要解码的第一个 byte 的索引
length - 要解码的 byte 数
charsetName - 受支持 charset 的名称
抛出：
UnsupportedEncodingException - 如果指定的字符集不受支持
IndexOutOfBoundsException - 如果 offset 和 length 参数索引字符超出 bytes 数组的范围
从以下版本开始：
JDK1.1

--------------------------------------------------------------------------------

String
public String(byte[] bytes,
              int offset,
              int length,
              Charset charset)通过使用指定的 charset 解码指定的 byte 子数组，构造一个新的 String。新 String 的长度是字符集的函数，因此可能不等于子数组的长度。
此方法总是使用此字符集的默认替代字符串替代错误输入 (malformed-input) 和不可映射字符 (unmappable-character) 序列。如果需要对解码过程进行更多控制，则应该使用 CharsetDecoder 类。


参数：
bytes - 要解码为字符的 byte
offset - 要解码的第一个 byte 的索引
length - 要解码的 byte 数
charset - 用来解码 bytes 的 charset
抛出：
IndexOutOfBoundsException - 如果 offset 和 length 参数索引字符超出 bytes 数组的边界
从以下版本开始：
1.6

--------------------------------------------------------------------------------

String
public String(byte[] bytes,
              String charsetName)
       throws UnsupportedEncodingException通过使用指定的 charset 解码指定的 byte 数组，构造一个新的 String。新 String 的长度是字符集的函数，因此可能不等于 byte 数组的长度。
当给定 byte 在给定字符集中无效的情况下，此构造方法的行为没有指定。如果需要对解码过程进行更多控制，则应该使用 CharsetDecoder 类。


参数：
bytes - 要解码为字符的 byte
charsetName - 受支持的 charset 的名称
抛出：
UnsupportedEncodingException - 如果指定字符集不受支持
从以下版本开始：
JDK1.1

--------------------------------------------------------------------------------

String
public String(byte[] bytes,
              Charset charset)通过使用指定的 charset 解码指定的 byte 数组，构造一个新的 String。新 String 的长度是字符集的函数，因此可能不等于 byte 数组的长度。
此方法总是使用此字符集的默认替代字符串替代错误输入和不可映射字符序列。如果需要对解码过程进行更多控制，则应该使用 CharsetDecoder 类。


参数：
bytes - 要解码为字符的 byte
charset - 要用来解码 bytes 的 charset
从以下版本开始：
1.6

--------------------------------------------------------------------------------

String
public String(byte[] bytes,
              int offset,
              int length)通过使用平台的默认字符集解码指定的 byte 子数组，构造一个新的 String。新 String 的长度是字符集的函数，因此可能不等于该子数组的长度。
当给定 byte 在给定字符集中无效的情况下，此构造方法的行为没有指定。如果需要对解码过程进行更多控制，则应该使用 CharsetDecoder 类。


参数：
bytes - 要解码为字符的 byte
offset - 要解码的第一个 byte 的索引
length - 要解码的 byte 数
抛出：
IndexOutOfBoundsException - 如果 offset 和 length 参数索引字符超出 bytes 数组的范围
从以下版本开始：
JDK1.1

--------------------------------------------------------------------------------

String
public String(byte[] bytes)通过使用平台的默认字符集解码指定的 byte 数组，构造一个新的 String。新 String 的长度是字符集的函数，因此可能不等于 byte 数组的长度。
当给定 byte 在给定字符集中无效的情况下，此构造方法的行为没有指定。如果需要对解码过程进行更多控制，则应该使用 CharsetDecoder 类。


参数：
bytes - 要解码为字符的 byte
从以下版本开始：
JDK1.1

--------------------------------------------------------------------------------

String
public String(StringBuffer buffer)分配一个新的字符串，它包含字符串缓冲区参数中当前包含的字符序列。该字符串缓冲区的内容已被复制，后续对它的修改不会影响新创建的字符串。

参数：
buffer - 一个 StringBuffer

--------------------------------------------------------------------------------

String
public String(StringBuilder builder)分配一个新的字符串，它包含字符串生成器参数中当前包含的字符序列。该字符串生成器的内容已被复制，后续对它的修改不会影响新创建的字符串。
提供此构造方法是为了简化到 StringBuilder 的迁移。通过 toString 方法从字符串生成器中获取字符串可能运行的更快，因此通常作为首选。


参数：
builder - 一个 StringBuilder
从以下版本开始：
1.5
