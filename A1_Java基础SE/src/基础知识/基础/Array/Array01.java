package 基础知识.基础.Array;

/*
数组的初始化：在内存当中创建一个数组，并且向其中赋予一些默认值。

两种常见的初始化方式：
1. 动态初始化（指定长度）
2. 静态初始化（指定内容）

动态初始化数组的格式：
数据类型[] 数组名称 = new 数据类型[数组长度];

解析含义：
左侧数据类型：也就是数组当中保存的数据，全都是统一的什么类型
左侧的中括号：代表我是一个数组
左侧数组名称：给数组取一个名字
右侧的new：代表创建数组的动作
右侧数据类型：必须和左边的数据类型保持一致
右侧中括号的长度：也就是数组当中，到底可以保存多少个数据，是一个int数字

=============================================================================================

动态初始化（指定长度）：在创建数组的时候，直接指定数组当中的数据元素个数。
静态初始化（指定内容）：在创建数组的时候，不直接指定数据个数多少，而是直接将具体的数据内容进行指定。

静态初始化基本格式：
数据类型[] 数组名称 = new 数据类型[] { 元素1, 元素2, ... };

注意事项：
虽然静态初始化没有直接告诉长度，但是根据大括号里面的元素具体内容，也可以自动推算出来长度。

==============================================================================================

直接打印数组名称，得到的是数组对应的：内存地址哈希值。

==============================================================================================

数组的两种错误：

1：索引值从0开始，一直到“数组的长度-1”为止。
   如果访问数组元素的时候，索引编号并不存在，那么将会发生
   数组索引越界异常

   ArrayIndexOutOfBoundsException

   原因：索引编号写错了。
   解决：修改成为存在的正确索引编号。

2：空指针异常 NullPointerException
   如：     int[] array = null;
            //array = new int[3];//这一行去掉就会发生错误
            System.out.println(array[0]);
   所有的引用类型变量，都可以赋值为一个null值。但是代表其中什么都没有。
   数组必须进行new初始化才能使用其中的元素。
   如果只是赋值了一个null，没有进行new创建，
   那么将会发生：

==============================================================================================

使用动态初始化数组的时候，其中的元素将会自动拥有一个默认值。规则如下：
如果是整数类型，那么默认为0；
如果是浮点类型，那么默认为0.0；
如果是字符类型，那么默认为'\u0000'；
如果是布尔类型，那么默认为false；
如果是引用类型，那么默认为null。

注意事项：
静态初始化其实也有默认值的过程，只不过系统自动马上将默认值替换成为了大括号当中的具体数值。

 */
public class Array01{
    public static void main(String[] args) {
        //动态初始化
        int [] array1 = new int[5];// 
        for (int i = 0; i < array1.length; i++) {
            System.out.println(array1[i]);
        }
        System.out.println("=============================");

        //静态初始化
        //第一种静态初始化
        double [] array2 = new double[]{10,20,30,40,50};
        for (int i = 0; i < array2.length; i++) {
            System.out.println(array2[ i ]);
        }
        System.out.println("=============================");

        //第二种静态初始化
        boolean [] array3={true,false,false,true,false};
        for (int i = 0; i < array3.length; i++) {
            System.out.println(array3[i]);
        }
        System.out.println("============================");

        //虽然静态初始化没有直接告诉长度，但是根据大括号里面的元素具体内容，也可以自动推算出来长度。
        int [] array4= new int[]{11,22,33,44,55,66,77,88,99};
        System.out.println(array4.length);
        System.out.println("============================");

        //直接打印数组名称，得到的是数组对应的：内存地址哈希值。
        int [] array5 = new int[]{10,30,60};
        System.out.println("array5内部元素的“内存地址哈希值”为：" + array5);
        System.out.println("===========================");

        String [] array6 = new String[]{"尴尬酱","电脑狂魔","666"};
        System.out.println(array6[0]);
        System.out.println(array6[1]);
        System.out.println(array6[2]);
        System.out.println("===========================");
        System.out.println("array5内部元素的“内存地址哈希值”为：" +array6);//内存地址哈希值

    }
}