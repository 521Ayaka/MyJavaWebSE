<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace: 名称空间 Mapper代理开发 要绑定接口-->
<mapper namespace="com.ganga.mapper.BrandMapper">
    <!--
    由于java使用的是驼峰命名发 而 sql用的是 _ 命名
    会发生映射不上问题
    可以配置BrandMapper.xml文件 来解决映射问题
    解决方案：
        1. 起别名 [补退选]
        2. resultMap

    resultMap标签中的两个属性:
        id: 唯一标识
        type: 映射的类型, 支持别名

    resultMap标签中的两个标签:
        id标签: 完成主键字段的映射
        result标签: 完成一般字段的映射

    -->


    <resultMap id="brandResultMap" type="com.ganga.pojo.Brand">
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>

        <!--column:数据库的列名  property映射类变量名-->
    </resultMap>


    <!--
        把resultType改成resultMap
        给定resultMap的id唯一标识即可完成映射
    -->
    <select id="selectAll" resultMap="brandResultMap">
        select *
        from tb_brand;

    </select>


    <!--
        参数占位符:
            1. #{}: 会将其代替为 ?, 为了防止SQL注入
            2. ${}: 拼sql, 会存在SQL注入问题
            使用时机:
                1. 参数传递的时候: #{}
                2. 一般不用${} 表名或列名不固定的情况下可以使用${}
                      但是依然会存在SQL注入问题！
    -->

    <select id="selectById" resultMap="brandResultMap">
        select *
        from tb_brand
        where id = #{id};
    </select>


    <!--
        特殊字符处理:
            1. 转义字符
            2. CDATA区:
                    <![CDATA[
                        符号
                    ]]>

             常用转义字符
            "	    	 &quot;      &#34;
            &		     &amp;       &#38;
            <		     &lt;        &#60;
            >		     &gt;        &#62;
            不断开空格     &nbsp;      &#160;
    -->

    <select id="selectByOrdered" resultMap="brandResultMap">
        select *
        from tb_brand
        where ordered &gt;= 50;
    </select>

    <!--
    参数接收方式:
        1. 散装参数: 如果方法中有多个参数, 需要使用( @Param("SQL参数占位符名称")数据类型 参数名称一般和占位符名称相同 )
        2. 对象参数: 对象的属性名称要和参数占位符名称一致
        3. map集合参数: Map map = new HashMap(); map.put("占位符名称",参数);
    -->

    <!--1. 散装参数: 如果方法中有多个参数, 需要使用( @Param("SQL参数占位符名称")数据类型 参数名称一般和占位符名称相同 )-->
    <select id="selectByCondition1" resultMap="brandResultMap">
        select *
        from tb_brand
        where status = #{status}
          and company_name like #{companyName}
          and brand_name like #{brandName};
    </select>
    <!--2. 对象参数: 对象的属性名称要和参数占位符名称一致-->
    <select id="selectByCondition2" resultMap="brandResultMap">
        select *
        from tb_brand
        where status = #{status}
          and company_name like #{companyName}
          and brand_name like #{brandName};
    </select>
    <!--3. map集合参数: Map map = new HashMap(); map.put("占位符名称",参数);-->
    <select id="selectByCondition3" resultMap="brandResultMap">
        select *
        from tb_brand
        where status = #{status}
          and company_name like #{companyName}
          and brand_name like #{brandName};
    </select>


    <!--
    动态获取sql
    -->
    <!--这种查询方式 用户必须要输入全部数据 而不能只输入一个-->
    <select id="selectDynamicSQL01" resultMap="brandResultMap">
        select *
        from tb_brand
        where status = #{status}
          and company_name like #{companyName}
          and brand_name like #{brandName};
    </select>

    <!--动态标签<if>
        依然纯在问题
            如果不查询第一个参数 后面的语句会有一个 and 组成了 where and 不合法
    -->
    <select id="selectDynamicSQL02" resultMap="brandResultMap">
        select *
        from tb_brand
        where
        <if test="status != null">
            status = #{status}
        </if>
        <if test="companyName != null and companyName != ''">
            and company_name like #{companyName}
        </if>
        <if test="brandName != null and brandName != ''">
            and brand_name like #{brandName};
        </if>
    </select>

    <!--
    解决方案:
        使用where标签
        会自动替换 没用的and等
    -->
    <select id="selectDynamicSQL03" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <if test="status != null">
                status = #{status}
            </if>
            <if test="companyName != null and companyName != ''">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName != ''">
                and brand_name like #{brandName};
            </if>
        </where>

    </select>

<!-- -->
    <!--
    动态获取SQL 查询条件: 单条件动态查询
    -->
    <!--
        需求: 3个公司中选择出一个公司
            再从该公司中模糊查询该商品
    -->
    <select id="selectDynamicSQL001" resultMap="brandResultMap">
        select *
        from tb_brand
        where
        <choose> <!--类似于switch-->
            <when test="status != null"> <!--类似于case-->
                status = #{status}
            </when>
            <when test="companyName != null and companyName != ''">
                company_name like #{companyName}
            </when>
            <when test="brandName != null and brandName != ''">
                brand_name like #{brandName};
            </when>
            <otherwise> <!--相当于default-->
                1 = 1
            </otherwise>
        </choose>
    </select>
    <!--
        使用<otherwise> 1 = 1 </otherwise> 太麻烦
        使用<while>标签改进优化
            <while>标签是非常智能的！
    -->
    <select id="selectDynamicSQL002" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <choose> <!--类似于switch-->
                <when test="status != null"> <!--类似于case-->
                    status = #{status}
                </when>
                <when test="companyName != null and companyName != ''">
                    company_name like #{companyName}
                </when>
                <when test="brandName != null and brandName != ''">
                    brand_name like #{brandName};
                </when>
            </choose>
        </where>
    </select>


    <!--
        添加数据
            获取主键：
            在 insert 标签中添加两个参数
            <insert id="addAll" useGeneratedKeys="true" keyProperty="id">
    -->
    <insert id="addAll" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand (brand_name, company_name, ordered, description, status)
        values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status});
    </insert>


    <!--
        修改操作
    -->
    <update id="updateBrand">

        update
            tb_brand
        set brand_name   = #{brandName},
            company_name = #{companyName},
            ordered      = #{ordered},
            description  = #{description},
            status       = #{status}
        where id = #{id};
    </update>

    <!--
        需求: 如果用户只修改其中部分信息
                那么没有修改的会被替换成null
                是非常危险的bug
        解决方案:
        使用: 动态SQL 修改数据
            <set> <if></if> </set> 标签
    -->
    <update id="updateBrandDynamic">
        update
        tb_brand
        <set>
            <if test="brandName != null and brandName != ''">
                brand_name = #{brandName},
            </if>
            <if test="companyName != null and companyName != ''">
                company_name = #{companyName},
            </if>
            <if test="ordered != null">
                ordered = #{ordered},
            </if>
            <if test="description != null and description != ''">
                description = #{description},
            </if>
            <if test="status != null">
                status = #{status}
            </if>
        </set>
        where
            id = #{id};

    </update>


    <!--
        删除操作
    -->
    <delete id="deleteById">
        delete
        from tb_brand
        where id = #{id};
    </delete>


    <!--
    批量删除
      问题：不知道用户要删除多少条数据
              就不知道要使用多少占位符！
      解决方案：
          使用动态SQL:
            <foreach collection="array" item="id" separator="," open="(" close=")">
                #{id}
            </foreach>
    其中:
        collection: 要遍历的集合
            在MyBatis中会将数组参数, 封装成为一个Map集合
                默认: array = 数组
                或使用@Param注解改变Map集合的默认key的名称
        item: 遍历的每一个结果变量名
        separator: 没个占位符之间的分隔符 如 "," -> ?,?,?
        open: 开始时, 前面要加的东西
        close: 结束时, 后面要加的东西
    -->
    <delete id="deleteByIdAll">
        delete from tb_brand
        where id
        in  <foreach collection="ids" item="id" separator="," open="(" close=")">
                #{id}
            </foreach>
    </delete>


</mapper>